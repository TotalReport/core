---
import "../styles/global.css";
---
<!doctype html>

<script>
	// Monkey-patch history methods to dispatch custom events when URL changes
	(function(history) {
	  // For replaceState
	  const originalReplaceState = history.replaceState;
	  history.replaceState = function() {
		const result = originalReplaceState.apply(this, arguments);
		// Dispatch a custom event after URL is changed
		window.dispatchEvent(new Event('urlchange'));
		return result;
	  };
  
	  console.info('history.replaceState modified');
	  
	  // For pushState
	  const originalPushState = history.pushState;
	  history.pushState = function() {
		const result = originalPushState.apply(this, arguments);
		// Dispatch a custom event after URL is changed
		window.dispatchEvent(new Event('urlchange'));
		return result;
	  };
	})(window.history);
  
	console.info('history.pushState modified');
</script>

<script is:inline>
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
 
	if (typeof localStorage !== 'undefined') {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>

<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro Basics</title>
	</head>
	<body>
		<slot />
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}
</style>


